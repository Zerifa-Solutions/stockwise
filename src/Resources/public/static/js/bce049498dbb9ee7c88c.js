"use strict";(window["webpackJsonpPluginzer-stock-wise"]=window["webpackJsonpPluginzer-stock-wise"]||[]).push([[514],{616:function(t,e,n){n.r(e),n.d(e,{default:function(){return a}});let{Mixin:i,Data:{Criteria:o}}=Shopware;var a={template:'{% block zer_stock_notification_list %}\n    <sw-page class="zer-stock-notification-list">\n        {% block zer_stock_notification_list_smart_bar_header %}\n            <template #smart-bar-header>\n                {% block zer_stock_notification_list_smart_bar_header_title %}\n                    <h2>\n                        {% block zer_stock_notification_list_smart_bar_header_title_text %}\n                            {{ $tc(\'zer-stock-notification.list.title\') }}\n                        {% endblock %}\n                        {% block zer_stock_notification_list_smart_bar_header_title_amount %}\n                            <span v-if="!isLoading" class="sw-page__smart-bar-amount">({{ total }})</span>\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block zer_useful_links_manual_links_list_language_switch %}\n            <template #language-switch>\n                <sw-language-switch @on-change="onChangeLanguage"/>\n            </template>\n        {% endblock %}\n\n        {% block zer_stock_notification_list_content %}\n            <template #content>\n                {% block zer_stock_notification_list_grid %}\n                    <sw-entity-listing\n                            v-if="notifications"\n                            ref="stockNotificationGrid"\n                            :items="notifications"\n                            :columns="columns"\n                            :repository="notificationRepository"\n                            :show-selection="false"\n                            :show-actions="false"\n                            :is-loading="isLoading"\n                            :allow-edit="false"\n                            :allow-delete="false"\n                            :allow-inline-edit="false"\n                            :sort-by="sortBy"\n                            :sort-direction="sortDirection"\n                            :natural-sorting="naturalSorting"\n                            :criteria-limit="limit"\n                            @column-sort="onColumnSort"\n                            @page-change="onPageChange"\n                            @update-records="updateTotal">\n\n                        {% block zer_stock_notification_list_grid_columns_product_name %}\n                            <template #column-product.name="{ item }">\n                                <router-link\n                                        v-if="item.product && item.product.id"\n                                        :to="{ name: \'sw.product.detail\', params: { id: item.product.id } }"\n                                >\n                                    <template v-if="item.product.translated.name">\n                                        {{ item.product.translated?.name || item.product.name }}\n                                    </template>\n                                    <template v-else-if="item.product.parentId && item.product.parent">\n                                        {{ item.product.parent.translated?.name || item.product.parent.name }}\n                                    </template>\n                                    <template v-else>\n                                        {{ item.product.productNumber }}\n                                    </template>\n                                </router-link>\n                                <template v-else>\n                                    {{ $tc(\'zer-stock-notification.list.deletedProduct\') }}\n                                </template>\n                            </template>\n                        {% endblock %}\n\n                        {% block zer_stock_notification_list_grid_columns_customer_name %}\n                            <template #column-customer.firstName="{ item }">\n                                <router-link\n                                        v-if="item.customer && item.customer.id"\n                                        :to="{ name: \'sw.customer.detail\', params: { id: item.customer.id } }"\n                                >\n                                    {{ item.customer.lastName }}, {{ item.customer.firstName }}\n                                </router-link>\n                                <template v-else-if="item.customer">\n                                    {{ item.customer.lastName }}, {{ item.customer.firstName }}\n                                </template>\n                            </template>\n                        {% endblock %}\n\n                        {% block zer_stock_notification_list_grid_columns_sales_channel %}\n                            <template #column-salesChannel.name="{ item }">\n                                {{ item.salesChannel ? item.salesChannel.translated.name : $tc(\'zer-stock-notification.list.emptySalesChannel\') }}\n                            </template>\n                        {% endblock %}\n\n                        {% block zer_stock_notification_list_grid_columns_status %}\n                            <template #column-status="{ item }">\n                            <sw-label\n                                    :variant="item.status === \'pending\' ? \'info\' : (item.status === \'sent\' ? \'success\' : \'danger\')">\n                            {{ $tc(`zer-stock-notification.status.${item.status}`) }}\n                            </sw-label>\n                            </template>\n                            {% endblock %}\n\n                            {% block zer_stock_notification_list_grid_columns_created_at %}\n                            <template #column-createdAt="{ item }">\n                            {{ dateFilter(item.createdAt) }}\n                            </template>\n                        {% endblock %}\n\n                        {% block zer_stock_notification_list_grid_columns_sent_at %}\n                            <template #column-sentAt="{ item }">\n                                <template v-if="item.status === \'sent\' && item.sentAt">\n                                    {{ dateFilter(item.sentAt) }}\n                                </template>\n                                <template v-else>\n                                    -\n                                </template>\n                            </template>\n                        {% endblock %}\n                    </sw-entity-listing>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}',inject:["repositoryFactory","filterFactory","acl"],mixins:[i.getByName("listing"),i.getByName("notification")],data(){return{notifications:null,isLoading:!1,total:0,page:1,limit:25,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!1}},computed:{notificationRepository(){return this.repositoryFactory.create("zer_stock_notification")},productRepository(){return this.repositoryFactory.create("product")},notificationCriteria(){let t=new o(this.page,this.limit);return t.addAssociation("product").addAssociation("customer").addAssociation("salesChannel"),this.sortBy.split(",").forEach(e=>{t.addSorting(o.sort(e,this.sortDirection,this.naturalSorting))}),t},columns(){return[{property:"product.name",label:this.$tc("zer-stock-notification.list.columnProduct"),routerLink:"sw.product.detail",primary:!0},{property:"customer.firstName",label:this.$tc("zer-stock-notification.list.columnCustomer")},{property:"salesChannel.name",label:this.$tc("zer-stock-notification.list.columnSalesChannel"),routerLink:"sw.salesChannel.detail"},{property:"status",label:this.$tc("zer-stock-notification.list.columnStatus")},{property:"sentAt",label:this.$tc("zer-stock-notification.list.columnSentAt")},{property:"createdAt",label:this.$tc("zer-stock-notification.list.columnCreatedAt")}]},dateFilter(){return Shopware.Filter.getByName("date")}},methods:{getList(){return this.isLoading=!0,this.notificationRepository.search(this.notificationCriteria).then(t=>{this.notifications=t,this.total=t.total;let e=this.getParentIds(t);return e.length>0?this.loadParentProducts(e):Promise.resolve()}).finally(()=>{this.isLoading=!1})},getParentIds(t){let e=[];return t.forEach(t=>{t.product&&t.product.translated?.name===null&&t.product.parentId&&e.push(t.product.parentId)}),[...new Set(e)]},loadParentProducts(t){let e=new o(1,t.length);return e.addFilter(o.equalsAny("id",t)),this.productRepository.search(e).then(t=>{this.notifications.forEach(e=>{e.product&&e.product.translated?.name===null&&e.product.parentId&&(e.product.parent=t.get(e.product.parentId))})})},updateTotal({total:t}){this.total=t},onChangeLanguage(){this.getList()},onColumnSort(t){this.onSortColumn(t)}}}}}]);